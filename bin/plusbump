#!/usr/bin/env ruby
require 'docopt'
require 'plusbump'

doc = <<DOCOPT
Usage:
  plusbump -h|--help
  plusbump ref <ref> <semver> [options]
  plusbump tag <tag-glob> [<semver>] [options]
  plusbump --version

Commands:
  ref:
    Bumps using a git ref as a base.
  tag:
    Bumps using tags, uses glob patterns to list tags matching, and selects the latest

Arguments:
    <ref>       A git reference. If specified, PlusBump will search for bumps from HEAD back to this <ref> instead of searching for a tag.
    <semver>    The base semver version to use as a base when outputting the bumped version.
    <tag-glob>  Git glob pattern tags must match for eligability. The resulting version number tries to filter out the tag glob from the result.

                Examples:
                  Numeric tag: '[0-9]', captures: 1.0.0, 2.0.0
                  Version tag: 'v', captures: v1.0.0, v2.0.0

Options:
  -h --help        Show this screen.

  -t --create-tag

    Tags the current commit with the result of the bump operation

  -p --prefix=<prefix>

    Specify the prefix for the new tag name. By default we do not include prefixes in the result.

  -s --start-ref=<start_ref>

    Indicates where the search should start. By default we use 'HEAD' as a starting point.
    
  --version       Shows current version of PlusBump
  --debug         Debug flag

DOCOPT

# Note: If you are reading the above usage in the source code and not using --help,
# then ignore the double escapes in the usage examples.
# On the command line you have to write --majorpattern='\+major'
# The extra escape is to make it print that way in the usage message.

begin
  # Parse Commandline Arguments
  input = Docopt.docopt(doc, version: PlusBump::VERSION)
  puts input if input['--debug']
rescue Docopt::Exit => e
  puts e.message
  exit
end

result = PlusBump.run(input)
PlusBump::Tag.create(result) if input['--create-tag'] && result
